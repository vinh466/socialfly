// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  username         String             @id @unique
  password         String
  email            String?            @unique
  avatar           String             @db.VarChar(255)
  firstname        String?
  lastname         String?
  gender           String?
  birth            DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt()
  Role             Role               @default(USER)
  Post             Post[]
  PostLike         PostLike[]
  PostComment      PostComment[]
  PostCommentLike  PostCommentLike[]
  UserChatGroup    UserChatGroup[]
  MessageRecipient MessageRecipient[]
  Message          Message[]
  followedBy       Friendship[]       @relation("following")
  following        Friendship[]       @relation("follower")

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Friendship {
  followerUser  String
  followingUser String
  isFriend      Boolean @default(false)
  isRequest     Boolean @default(false)
  isBlock       Boolean @default(false)
  follower      User    @relation("follower", fields: [followerUser], references: [username])
  following     User    @relation("following", fields: [followingUser], references: [username])

  @@id([followerUser, followingUser])
  @@map("friendships")
}

model Post {
  id           String         @id @default(cuid()) @db.Char(25)
  title        String
  published    Boolean        @default(false)
  creatorId    String
  createdAt    DateTime       @default(now())
  Creator      User           @relation(fields: [creatorId], references: [username])
  PostCategory PostCategory[]
  PostLike     PostLike[]
  PostComment  PostComment[]
  PostTag      PostTag[]

  @@map("posts")
}

model PostCategory {
  postId     String
  post       Post     @relation(fields: [postId], references: [id])
  categoryId String
  Category   Category @relation(fields: [categoryId], references: [id])

  @@id([postId, categoryId])
  @@map("post_categories")
}

model Category {
  id   String         @id @default(cuid()) @db.Char(25)
  name String
  post PostCategory[]

  @@map("categories")
}

model PostTag {
  postId String
  tagId  String
  Post   Post   @relation(fields: [postId], references: [id])
  Tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
  @@map("post_tags")
}

model Tag {
  id       String    @id @default(cuid()) @db.Char(25)
  parentId String?
  name     String
  iconPath String?
  ParentIs Tag?      @relation("TagChildOf", fields: [parentId], references: [id])
  HasChild Tag[]     @relation("TagChildOf")
  PostTag  PostTag[]

  @@map("tags")
}

model PostLike {
  id        String   @id @default(cuid()) @db.Char(25)
  postId    String
  username  String
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [username], references: [username])

  @@map("post_likes")
}

model PostComment {
  id              String            @id @default(cuid()) @db.Char(25)
  postId          String
  userId          String
  createdAt       DateTime          @default(now())
  Post            Post              @relation(fields: [postId], references: [id])
  User            User              @relation(fields: [userId], references: [username])
  PostCommentLike PostCommentLike[]

  @@map("post_comments")
}

model PostCommentLike {
  id            String      @id @default(cuid()) @db.Char(25)
  userId        String
  postCommentId String
  createdAt     DateTime    @default(now())
  PostComment   PostComment @relation(fields: [postCommentId], references: [id])
  User          User        @relation(fields: [userId], references: [username])

  @@map("post_comment_likes")
}

model UserChatGroup {
  id               String             @id @default(cuid()) @db.Char(25)
  username         String
  chatGroupId      String
  createAt         DateTime           @default(now())
  isActive         Boolean            @default(false)
  User             User               @relation(fields: [username], references: [username])
  ChatGroup        ChatGroup          @relation(fields: [chatGroupId], references: [id])
  MessageRecipient MessageRecipient[]

  @@map("user_chat_groups")
}

model ChatGroup {
  id            String          @id @default(cuid()) @db.Char(25)
  name          String
  createAt      DateTime        @default(now())
  isActive      Boolean         @default(false)
  UserChatGroup UserChatGroup[]

  @@map("chat_groups")
}

model MessageRecipient {
  id               String        @id @default(cuid()) @db.Char(25)
  recipientId      String
  recipientGroupId String
  messageId        String
  isRead           Boolean       @default(false)
  Recipient        User          @relation(fields: [recipientId], references: [username])
  RecipientGroup   UserChatGroup @relation(fields: [recipientGroupId], references: [id])
  Message          Message       @relation(fields: [messageId], references: [id])

  @@map("message_recipients")
}

model Message {
  id               String             @id @default(cuid()) @db.Char(25)
  MessageRecipient MessageRecipient[]
  creatorId        String
  messageBody      String
  parentId         String
  createAt         DateTime           @default(now())
  Creator          User               @relation(fields: [creatorId], references: [username])
  ParentIs         Message?           @relation("MessageChildOf", fields: [parentId], references: [id])
  HasChild         Message[]          @relation("MessageChildOf")

  @@map("messages")
}
