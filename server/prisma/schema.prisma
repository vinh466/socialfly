// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  username          String             @id @unique
  password          String
  email             String?            @unique
  avatar            String?            @db.VarChar(255)
  firstname         String?
  lastname          String?
  gender            String?
  birth             DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt()
  role              Role               @default(USER)
  posts             Post[]
  postLikes         PostLike[]
  postComments      PostComment[]
  postCommentLikes  PostCommentLike[]
  userChatRooms     UserChatRoom[]
  messageRecipients MessageRecipient[]
  messages          Message[]
  followedBys       Friendship[]       @relation("following")
  followings        Friendship[]       @relation("follower")

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Friendship {
  followerUser  String
  followingUser String
  isFriend      Boolean @default(false)
  isRequest     Boolean @default(false)
  isBlock       Boolean @default(false)
  follower      User    @relation("follower", fields: [followerUser], references: [username])
  following     User    @relation("following", fields: [followingUser], references: [username])

  @@id([followerUser, followingUser])
  @@map("friendships")
}

model Post {
  id            String         @id @default(cuid()) @db.Char(25)
  title         String
  img           String?
  published     Boolean        @default(false)
  creatorId     String
  createdAt     DateTime       @default(now())
  creator       User           @relation(fields: [creatorId], references: [username])
  postCategorys PostCategory[]
  postLikes     PostLike[]
  postComments  PostComment[]
  postTags      PostTag[]

  @@map("posts")
}

model PostCategory {
  postId     String
  categoryId String
  post       Post     @relation(fields: [postId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([postId, categoryId])
  @@map("post_categories")
}

model Category {
  id             String         @id @default(cuid()) @db.Char(25)
  name           String
  postCategories PostCategory[]

  @@map("categories")
}

model PostTag {
  postId String
  tagId  String
  Post   Post   @relation(fields: [postId], references: [id])
  Tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
  @@map("post_tags")
}

model Tag {
  id        String    @id @default(cuid()) @db.Char(25)
  parentId  String?
  name      String
  iconPath  String?
  parentIs  Tag?      @relation("TagChildOf", fields: [parentId], references: [id])
  hasChilds Tag[]     @relation("TagChildOf")
  postTags  PostTag[]

  @@map("tags")
}

model PostLike {
  id        String   @id @default(cuid()) @db.Char(25)
  postId    String
  username  String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [username], references: [username])

  @@map("post_likes")
}

model PostComment {
  id               String            @id @default(cuid()) @db.Char(25)
  postId           String
  userId           String
  comment          String
  createdAt        DateTime          @default(now())
  post             Post              @relation(fields: [postId], references: [id])
  user             User              @relation(fields: [userId], references: [username])
  postCommentLikes PostCommentLike[]

  @@map("post_comments")
}

model PostCommentLike {
  id            String      @id @default(cuid()) @db.Char(25)
  userId        String
  postCommentId String
  createdAt     DateTime    @default(now())
  postComment   PostComment @relation(fields: [postCommentId], references: [id])
  user          User        @relation(fields: [userId], references: [username])

  @@map("post_comment_likes")
}

model UserChatRoom {
  id                String             @id @default(cuid()) @db.Char(25)
  username          String
  chatRoomId        String
  createdAt         DateTime           @default(now())
  isActive          Boolean            @default(false)
  user              User               @relation(fields: [username], references: [username])
  chatRoom          ChatRoom           @relation(fields: [chatRoomId], references: [id])
  messageRecipients MessageRecipient[]

  @@map("user_chat_rooms")
}

model ChatRoom {
  id            String         @id @default(cuid()) @db.Char(25)
  name          String?
  avatar        String?
  memberNum     Int            @default(0)
  isActive      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  userChatRooms UserChatRoom[]

  @@map("chat_rooms")
}

model MessageRecipient {
  id              String       @id @default(cuid()) @db.Char(25)
  recipientId     String
  recipientRoomId String
  messageId       String
  isRead          Boolean      @default(false)
  recipient       User         @relation(fields: [recipientId], references: [username])
  recipientRoom   UserChatRoom @relation(fields: [recipientRoomId], references: [id])
  message         Message      @relation(fields: [messageId], references: [id])

  @@map("message_recipients")
}

model Message {
  id               String             @id @default(cuid()) @db.Char(25)
  creatorId        String
  messageBody      String
  // messageSystemId  String
  attachId         String?
  parentId         String?
  createdAt        DateTime           @default(now())
  messageRecipient MessageRecipient[]
  creator          User               @relation(fields: [creatorId], references: [username])
  parentIs         Message?           @relation("MessageChildOf", fields: [parentId], references: [id])
  hasChilds        Message[]          @relation("MessageChildOf")
  messageSystem    SystemMessage?

  @@map("messages")
}

model SystemMessage {
  id          String   @id @default(cuid()) @db.Char(25)
  messageBody Json
  type        String
  createdAt   DateTime @default(now())
  message     Message  @relation(fields: [id], references: [id])

  @@map("system_messages")
}

enum SystemMessageType {
  call
  VideoCall
  Notice
}

model MediaFile {
  id        String        @id @default(cuid()) @db.Char(25)
  creatorId String
  filename  String
  path      String
  type      MediaFileType
  size      String
}

enum MediaFileType {
  VIDEO
  IMAGE
  TEXT
  ORTHER
}
